var Style = require('./Style.js');
var Vec2  = require('../util/Vec2.js');
var Pool  = require('../util/Pool.js');

module.exports = (function() {

  // Legit pool
  var pool = Canvas._pool = new Pool(Canvas);
  Canvas.aquire = function() { return pool.aquire(); };
  Canvas.release = function(c) { return pool.release(c); };

  // Proxy / Abstraction of the raw canvas element with a fluent-style
  // chainable API
  function Canvas(canvas)
  {
    this._canvas       = canvas || this._canvas ||
      document.createElement('canvas');
    this._ctx          = this._canvas.getContext('2d');
    this._canvas.width = 150;
    this._canvas.width = 150;
  }

  // Change canvas size (CLEARS CANVAS!)
  Canvas.prototype.resize = function(x, y)
  {
    this._canvas.width = x;
    this._canvas.height = y;
    return this;
  };

  // Translate with a vector parameter
  Canvas.prototype.vtranslate = function(v)
  {
    this._ctx.translate(v.x, v.y);
    return this;
  };

  // Scale via a vector
  Canvas.prototype.vscale = function(v)
  {
    this._ctx.scale(v.x, v.y);
    return this;
  };

  // Scale it
  Canvas.prototype.scale = function(x, y)
  {
    this._ctx.scale(x, y);
    return this;
  };

  // Translate with numbers
  Canvas.prototype.translate = function(x, y)
  {
    this._ctx.translate(x, y);
    return this;
  };

  // Set the global composite operations
  Canvas.prototype.setBlendMode = function(mode)
  {
    this._ctx.globalCompositeOperation = mode;
    return this;
  };

  // Spin it
  Canvas.prototype.rotate = function(theta)
  {
    if (!theta) return this;
    this._ctx.rotate(theta);
    return this;
  };

  // Save it
  Canvas.prototype.save = function()
  {
    this._ctx.save();
    return this;
  };

  // Restore it
  Canvas.prototype.restore = function()
  {
    this._ctx.restore();
    return this;
  };

  // Draw image
  Canvas.prototype.drawImage = function(image, offset)
  {
    this._ctx.drawImage(image,
      -offset.x,
      -offset.y,
      image.width,
      image.height);
    return this;
  };

  // Fill with a color
  Canvas.prototype.fill = function(color)
  {
    this._ctx.fillStyle = color || 'white';
    this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);
    return this;
  };

  // Draw a canvas object onto this
  Canvas.prototype.drawCanvas = function(canvas)
  {
    this._ctx.drawImage(canvas._canvas, 0, 0);
    return this;
  };

  // Full arc
  Canvas.prototype.drawCircle = function(radius, style)
  {
    return this.drawArc(0, Math.PI*2, radius, style);
  };

  // Arc a path
  Canvas.prototype.drawArc = function(start, stop, radius, style)
  {
    style = style || Style.defaultStyle;
    var ctx = this._ctx;

    ctx.beginPath();
    ctx.arc(0, 0, radius, start, stop, false);

    this._fill(style);
    this._stroke(style);
    return this;
  };

  // Draw a polygon specified by an array of verticies
  Canvas.prototype.drawShape = function(vertices, style)
  {
    style = style || Style.defaultStyle;
    var ctx = this._ctx;

    ctx.beginPath();
    for (var n = 0; n < vertices.length; n++) {
      var point = vertices[n];
      if (n) ctx.lineTo(point.x, point.y);
      else ctx.moveTo(point.x, point.y);
    }
    ctx.closePath();

    this._fill(style);
    this._stroke(style);
    return this;
  };

  Canvas.prototype.drawRectangle = function(size, style)
  {
    style = style || Style.defaultStyle;
    var ctx = this._ctx;
    ctx.beginPath();
    ctx.rect(0, 0, size.x, size.y);

    this._fill(style);
    this._stroke(style);
    return this;
  };

  Canvas.prototype.drawLine = function(line, style)
  {
    style = style || Style.defaultStyle;

    var ctx = this._ctx;
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(line.x, line.y);

    this._stroke(style);
    return this;
  };

  Canvas.prototype.drawText = function(text, style)
  {
    style = style || Style.defaultStyle;
    var ctx = this._ctx;

    ctx.font         = style.font;
    ctx.textAlign    = style.textAlign;
    ctx.textBaseline = style.textBaseline;

    if (style.color) {
      ctx.fillStyle = style.color;
      ctx.fillText(text, 0, 0);
    }

    if (style.strokeWidth && style.stroke) {
      ctx.strokeStyle = style.stroke;
      ctx.lineWidth = style.strokeWidth;
      ctx.strokeText(text, 0, 0);
    }

    return this;
  };

  // Fill with a style
  Canvas.prototype._fill = function(style)
  {
    var ctx = this._ctx;
    if (style.color) {
      ctx.fillStyle = style.color;
      ctx.fill();
    }
  };

  // Stroke /w style
  Canvas.prototype._stroke = function(style)
  {
    var ctx = this._ctx;
    if (style.strokeWidth && style.stroke) {
      ctx.strokeStyle = style.stroke;
      ctx.lineWidth = style.strokeWidth;
      ctx.stroke();
    }
  };

  return Canvas;

})();
