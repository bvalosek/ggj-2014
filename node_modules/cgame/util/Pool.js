module.exports = (function() {

  // Keep track of all pools
  Pool.pools = [];

  // Create an object pool of type T. Requires that all state is reset / set
  // in the constructor of the object.
  function Pool(T, initialSize)
  {
    this.freeList = [];
    this.count    = 0;
    this.T        = T;

    this.expand(initialSize || 1);

    Pool.pools.push(this);
  }

  // Add free items to the pool
  Pool.prototype.expand = function(count)
  {
    for (var n = 0; n < count; n++)
      this.freeList.push(new this.T());
    this.count += count;
  };

  // Request a free item from the pool and re-init it
  Pool.prototype.aquire = function()
  {
    if (this.freeList.length <= 0) {
      this.expand(Math.round(this.count*0.2) + 1);
    }

    var item = this.freeList.pop();
    this.T.call(item);
    return item;
  };

  // Give an item back to the pool
  Pool.prototype.release = function(item)
  {
    this.freeList.push(item);
  };

  Pool.prototype.totalUsed = function()
  {
    return this.count - this.freeList.length;
  };

  return Pool;

})();
