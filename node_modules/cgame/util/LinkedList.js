var Pool = require('./Pool');

module.exports = (function() {

  // Legit pool
  var pool = LinkedList._pool = new Pool(LinkedList);
  LinkedList.aquire = function() { return pool.aquire(); };
  LinkedList.release = function(x) { return pool.release(x); };

  LinkedList.aquireOrClear = function(x) {
    if (x) return x.clear();
    return LinkedList.aquire();
  };

  // Linked list with no random access. Using pooling for nodes
  function LinkedList()
  {
    this.first = null;
    this.last  = null;
    this.count = 0;
  }

  function ListNode()
  {
    this.prev = null;
    this.next = null;
    this.obj  = null;
  }

  var nodePool = new Pool(ListNode);

  // Creates a new node and returns it
  LinkedList.prototype.push = function(obj)
  {
    var node = nodePool.aquire();

    // Node object
    node.obj = obj;
    node.prev = this.last;

    // Update list
    if (this.last) this.last.next = node;
    this.last = node;
    this.count++;
    if (!this.first) this.first = node;

    return node;
  };

  // Given a node, remove from the list. Recycles the node-- do not use after
  LinkedList.prototype.removeNode = function(node)
  {
    var next = node.next;
    var prev = node.prev;

    // Join break up
    if (next) next.prev = prev;
    if (prev) prev.next = next;

    // End points
    if (!next) this.last = prev;
    if (!prev) this.first = next;

    nodePool.release(node);
    this.count--;
    return this;
  };

  // Clear the list out
  LinkedList.prototype.clear = function()
  {
    var node = this.first;
    while(node) {
      nodePool.release(node);
      node = node.next;
    }

    this.first = this.last = null;
    this.count = 0;
    return this;
  };

  return LinkedList;

})();
