var InputManager    = require('./input/InputManager');
var ResourceManager = require('./resources/ResourceManager');
var ScreenManager   = require('./renderer/ScreenManager');

module.exports = (function() {

  // Centralized Game object.
  function Game()
  {
    if (Game.instance)
      throw 'Can only instantiate one Game object';
    Game.instance = this;

    this.lastTime = null;
    this.frameNumber = 0;

    // Graphics
    this.graphics  = new ScreenManager();
    this.screen    = this.graphics.screen;
    this.input     = new InputManager();
    this.resources = new ResourceManager();
    this.sound     = null;
    this.storage   = null;
    this.config    = {};

    this.scenes = [];

    // Bind
    this._loop = this._loop.bind(this);
  }

  // Fire off teh RAF
  Game.prototype.start = function()
  {
    requestAnimationFrame(this._loop);
    return this;
  };

  // Add a new scene (will not pause underlying scene)
  Game.prototype.addScene = function(scene)
  {
    this.scenes.push(scene);
  };

  // Pause current scene
  Game.prototype.pauseCurrentScene = function()
  {
    var scene = this.scenes[0];
    if (scene)
      scene.state = PAUSED;
  };

  // Main game loop. Delegates updating to all active scenes.
  Game.prototype._loop = function(time)
  {
    requestAnimationFrame(this._loop);
    this.frameNumber++;
    var dt = this.lastFrameTime =
    this.lastTime ? time - this.lastTime : 0;
    this.lastTime = time;
    var t = Date.now();

    // Delegate update to all scenes
    for (var n = 0; n < this.scenes.length; n++) {
      this.scenes[n].update(dt, time);
    }

    // Delegate update to input system
    this.input.update(dt, time);

    this.loopTime = Date.now() - t;
  };

  // ------------------------------------------------------------------------
  // Polyfill for raf

  global.requestAnimationFrame = global.requestAnimationFrame ||
  global.webkitRequestAnimationFrame ||
  global.mozRequestAnimationFrame;

  return Game;

})();
