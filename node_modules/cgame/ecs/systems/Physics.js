var Newtonian = require('../components/Newtonian.js');
var Position  = require('../components/Position.js');
var Elastic   = require('../components/Elastic.js');
var Collision = require('../components/Collision.js');
var System    = require('../System.js');
var Vec2      = require('../../util/Vec2.js');
var __extends = require('../../util/extends.js');

module.exports = (function(_super) {
  __extends(Physics, _super);

  Physics.componentTypes = [Newtonian, Position];
  Physics.elasticFilter = [Newtonian, Elastic];

  // System that advances (and caps) velocity and acceleration of newtonian
  // components, as well as radial speed. Does not change actual position
  function Physics()
  {
    _super.apply(this, arguments);
    this.listenTo(
      Collision.coincident,
      Physics.elasticFilter,
    this.onElasticCollision);
  }

  Physics.prototype.onElasticCollision = function(entity, others)
  {
    var ab = Vec2.aquire();

    for (var n = 0; n < others.length; n++) {
      var other = others[n];
      if (other.Collision &&
        other.Collision.ignoreFlag === other.Collision.ignoreFlag)
          continue;
      ab.assign(other.Position.location).sub(entity.Position.location);
      ab.normalize(entity.Spatial.size + other.Spatial.size).smult(-1.44);
      entity.Position.location.assign(other.Position.location).add(ab);
      entity.Newtonian.velocity.rotate(Math.PI).smult(0.5);
    }

    Vec2.release(ab);
  };

  // Fake spaceship physics #loveit
  Physics.prototype.update = function(dt, time)
  {
    var entities = this.entityManager
      .getEntitiesByComponents(Physics.componentTypes);

    for (var n = 0; n < entities.length; n++) {
      var entity = entities[n];

      var v    = entity.Newtonian.velocity;
      var a    = entity.Newtonian.acceleration;
      var rs   = entity.Newtonian.radialSpeed;
      var a_   = a.magnitude();
      var maxV = entity.Newtonian.maxSpeed;
      var maxA = entity.Newtonian.maxAcceleration;

      // Cap accelereation
      if (maxA) a.limit(maxA);

      if (a_ > 0) {
        v.x += a.x * dt / 1000;
        v.y += a.y * dt / 1000;
      }

      // Limit velocity
      if (maxV) v.limit(maxV);

      // Rotate TODO: limit by max speed
      entity.Position.rotation = (entity.Position.rotation +
      entity.Newtonian.radialSpeed * dt / 1000) %
        (Math.PI * 2);
    }
  };

  return Physics;

})(System);
