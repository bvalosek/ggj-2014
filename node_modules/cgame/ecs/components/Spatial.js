module.exports = (function() {

  // Gives an entity the concept of taking up space (and thus having a
// location -- position is required as well)
    function Spatial()
    {
      this.size = 0;

      // where it is in the quad tree
      this._entry = null;
      this._tree  = null;
    }

    // Cleanup the entry on the quad tree
    Spatial.prototype.onRemove = function()
    {
      if (this._entry && this._tree) {
        this._tree.removeEntry(this._entry);
      }
    };

    // Give all entities in an array
    Spatial.getCoincidentEntities = function(entity)
    {
      var entry = entity.Spatial._entry;
      var tree  = entity.Spatial._tree;
      if (!entry || !tree) return;

      var pos   = entry.position;
      var size  = entry.size;

      var entries = tree.getEntries(pos, size);

      var ret = [];
      for (var n = 0; n < entries.length; n++) {
        var e = entries[n];
        if (e.obj !== entity)
          ret.push(e.obj);
      }

      return ret;
    };

    return Spatial;

})();
