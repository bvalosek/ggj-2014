module.exports = (function() {

  // Highest level abstraction for the Entity/Component system. Has an
  // EntityManager that is used to contain all the entities and a list of
  // System(s) that all have the EntityManager injected.
  function SystemManager(entityManager)
  {
    if (!entityManager)
      throw 'Must be instantiated with an entityManager';

    this.systems = [];
    this._systemTMap = {};
    this.entityManager = entityManager;
    this.entityManager.systemManager = this;
    this.events = {}; // event map -> system[] -> (filter, callback)
    this.totalTriggers  = 0;
    this.totalListeners = 0;
  }

  // Trigger an event for any callbacks / Component filter combos we have
  // that match
  SystemManager.prototype.trigger = function(entity, event, option)
  {
    this.totalTriggers++;
    var entry = this.events[event];
    if (!entry) return;

    for (var n = 0; n < entry.length; n++) {
      var info       = entry[n];
      var Components = info.Components;
      var callback   = info.callback;

      if (entity.hasAllComponents(Components)) {
        callback(entity, option);
        this.totalListeners++;
      }
    }
  };

  SystemManager.prototype.getSystemTByName = function(name)
  {
    var T = this._systemTMap[name];
    if (!T) throw 'Cannot resolve system constructor: ' + name;
    return T;
  };

  // Allows a callback to be fired for a system that is listening to an event
  // + Components filter
  SystemManager.prototype.listenTo = function(event, system, Components, callback)
  {
    if (!this.events[event])
      this.events[event] = [];

    this.events[event].push({
      Components: Components,
      callback: callback.bind(system),
    });
  };

  // Instantiate and setup a system class to be used in the updates
  SystemManager.prototype.addSystem = function(System)
  {
    var system = new System(this);
    this.systems.push(system);
    this._systemTMap[System.name] = System;

    // Injecet info into the systems
    system.entityManager = this.entityManager;
    system.manager       = this;

    return system;
  };

  // Let all systems process what the need to given a dt and time change
  SystemManager.prototype.updateAll = function(dt, time)
  {
    this.totalTriggers  = 0;
    this.totalListeners = 0;
    for (var n = 0; n < this.systems.length; n++) {
      this.systems[n].update(dt, time);
    }
  };

  return SystemManager;

})();
