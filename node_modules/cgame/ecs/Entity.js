module.exports = (function() {

  var _id = 0;

  // Abstract object that is a superposition of components. Should be treated
  // as a very dumb thing, storing data in various Component(s) that are then
  // brought to life via the System(s). ALl methods are effectively proxied
  // to the EntityManager managing this entity.
  function Entity()
  {
    // Set by manager
    this.id = null;

    // All operations are proxied through our manager. Injected
    this._manager = null;

    // All tags that have been applied to this Entity. Set by the manager
    this._tags = [];

    // All component classes that are part of this entity. Set by the
    // manager
    this._Components = [];
  }

  // Returns true if this entity has a specific component
  Entity.prototype.hasComponent = function(Component)
  {
    return !!~this._Components.indexOf(Component);
  };

  Entity.prototype.trigger = function(event, option)
  {
    this._manager.systemManager.trigger(this, event, option);
  };

  // Returns true if an entity has ALl of the Components specified in the
  // array param
  Entity.prototype.hasAllComponents = function(Components)
  {
    var b = true;
    for (var i = 0; i < Components.length; i++) {
      var C = Components[i];
      b &= !!~this._Components.indexOf(C);
    }

    return b;
  };

  // Use the manager to add a component to this entity
  Entity.prototype.addComponent = function(Component, opts)
  {
    return this._manager.addEntityComponent(this, Component, opts);
  };

  // Use the manager to remove a component to this entity
  Entity.prototype.removeComponent = function(Component)
  {
    return this._manager.removeEntityComponent(this, Component);
  };

  // use the manager to tag this entity
  Entity.prototype.addTag = function(tag)
  {
    return this._manager.tagEntity(this, tag);
  };

  // Use the manager to remove a tag from this entitiy
  Entity.prototype.removeTag = function(tag)
  {
    return this._manager.removeEntityTag(this, tag);
  };

  // Request removal via the manager
  Entity.prototype.remove = function()
  {
    return this._manager.removeEntity(this);
  };

  Entity.prototype.toString = function()
  {
    return '[Entity id=' + this.id + ']';
  };

  return Entity;

})();
