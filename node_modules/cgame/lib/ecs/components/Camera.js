var Vec2     = require('../../util/Vec2.js');
var Position = require('./Position.js');

module.exports = (function() {

  // Component that is the current view for a given canvas.
  function Camera()
  {
    this.canvas = null;
    this.scale  = 1;

    // Recycling bin
    this._offset = Vec2.aquireOrClear(this._offset);
    this._size = Vec2.aquireOrClear(this._size);
  }

  // Offset. how far off screen (0,0) is, e.g. (-500, -300)
  Camera.getScreenOffset = function(entity)
  {
    var v = entity.Camera._offset.clear();
    Camera.toScreenVector(entity, v);
    return v;
  };

  // Size of a camera's area
  Camera.getScreenSize = function(entity)
  {
    var c = entity.Camera;
    return c._size.set(
      c.canvas._canvas.width * (1 / entity.Camera.scale),
      c.canvas._canvas.height * (1 / entity.Camera.scale)
    );
  };

  // Mutate a vector that is in world space into one that is in camera
  // (aka canvas) space
  Camera.toScreenVector = function(camera, vector)
  {
    var v = Vec2.aquire().set(
      camera.Camera.canvas._canvas.width / 2 * (1 / camera.Camera.scale),
      camera.Camera.canvas._canvas.height / 2 * (1 / camera.Camera.scale)
    );

    // position = gameLoc - camera + (centering offset accounting for
    // scale)
    vector.sub(Position.getAbsoluteLocation(camera)).add(v);

    Vec2.release(v);
    return vector;
  };

  // Mutate a vector that is in screen (aka canvas) space into one that is in
  // game space
  Camera.toGameVector = function(camera, vector)
  {
    var v = Vec2.aquire();
    v.x = camera.Camera.canvas._canvas.width / 2;
    v.y = camera.Camera.canvas._canvas.height / 2;

    vector.add(Position.getAbsoluteLocation(camera)).sub(v);

    Vec2.release(v);
    return vector;
  };

  return Camera;

})();
