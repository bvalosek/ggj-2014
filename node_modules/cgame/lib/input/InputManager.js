var Vec2 = require('../util/Vec2.js');

module.exports = (function() {

  // Handle incoming inputs and generate events for any interested parties
  function InputManager()
  {
    // Maintain 'this' on callbacks
    this._keyDown    = this._keyDown.bind(this);
    this._keyUp      = this._keyUp.bind(this);
    this._mouseDown  = this._mouseDown.bind(this);
    this._mouseUp    = this._mouseUp.bind(this);
    this._mouseMove  = this._mouseMove.bind(this);
    this._mouseWheel = this._mouseWheel.bind(this);

    // Map of currently running inputs and their state (0 for off /
    // neutral, -1, 1 range). Each input has a tag that is generated
    this.inputs = {};

    this.monitorKeys();
    this.monitorMouse();
  }

  // Called from the game loop, let us update anything we need
  InputManager.prototype.update = function(dt, time)
  {
    delete this.inputs.position_wheel;

    if (navigator.webkitGetGamepads) {
      var pads = navigator.webkitGetGamepads();
      this.inputs.gamepads = navigator.webkitGetGamepads();
    }
  };

  // Add keyboard inputs (presses) to the manager
  InputManager.prototype.monitorKeys = function()
  {
    document.onkeydown = this._keyDown;
    document.onkeyup   = this._keyUp;
  };

  // Add mouse (hover and click) inputs to the manager
  InputManager.prototype.monitorMouse = function()
  {
    this.inputs.hover_m   = new Vec2();
    document.onmousedown  = this._mouseDown;
    document.onmouseup    = this._mouseUp;
    document.onmousemove  = this._mouseMove;
    document.onmousewheel = this._mouseWheel;

    // Block right click, still gets picked up on the normal mousedown
    // event as seperate button
    document.oncontextmenu = function() { return false; };
  };

  InputManager.prototype._keyDown = function(e)
  {
    e.preventDefault();
    this.inputs['button_k_' + e.keyCode] = 1;
  };

  InputManager.prototype._keyUp = function(e)
  {
    e.preventDefault();
    delete this.inputs['button_k_' + e.keyCode];
  };

  InputManager.prototype._mouseWheel = function(e)
  {
    e.preventDefault();
    var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
    this.inputs.position_wheel = delta;
  };

  InputManager.prototype._mouseDown = function(e)
  {
    e.preventDefault();
    this.inputs['position_m_' + e.which] = new Vec2(e.clientX, e.clientY);
  };

  InputManager.prototype._mouseUp = function(e)
  {
    e.preventDefault();
    delete this.inputs['position_m_' + e.which];
  };

  InputManager.prototype._mouseMove = function(e)
  {
    e.preventDefault();
    var x = e.clientX;
    var y = e.clientY;
    this.inputs.hover_m.x = x;
    this.inputs.hover_m.y = y;

    if (this.inputs['position_m_' + e.which]) {
      this.inputs['position_m_' + e.which].x = x;
      this.inputs['position_m_' + e.which].y = y;
    }
  };

  return InputManager;

})();
